#lang racket

;; al2-logo.rkt -- generate the logo files for the AL2 application(s)
;;
;; This file is part of ActivityLog2 -- https://github.com/alex-hhh/ActivityLog2
;; Copyright (c) 2022, 2025 Alex Harsányi <AlexHarsanyi@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation, either version 3 of the License, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.
;;
;; You should have received a copy of the GNU General Public License along
;; with this program.  If not, see <http://www.gnu.org/licenses/>.

(require pict racket/draw file/ico)

;; Create an ICO file from the bitmap BMP.  The resulting icon will be square
;; even if BMP is not.  The height of BMP will determine the size of the icon.
(define (bitmap->ico bmp)
  (let* ((w (send bmp get-width))
         (h (send bmp get-height))
         (d (send bmp get-depth))
         (buf (make-bytes (* w h 4))))
    (send bmp get-argb-pixels 0 0 w h buf)
    ;; Bitmaps generated by the icon tools are not square... make a square one
    (let ((nbmp (make-object bitmap% h h #f #t))
          (ofs (exact-round (/ (- h w) 2))))
      (send nbmp set-argb-pixels ofs 0 w h buf)
      (let ((nbuf (make-bytes (* h h 4))))
        (send nbmp get-argb-pixels 0 0 h h nbuf)
        (argb->ico h h nbuf #:depth d)))))

(define (random-rect w h e color)
  (dc (lambda (dc dx dy)
        (define old-pen (send dc get-pen))
        (define old-brush (send dc get-brush))
        (define ew (* w e))
        (define eh (* h e))

        (define points0
          (list (cons (+ dx (* ew (random)))
                      (+ dy (* eh (random))))
                (cons (+ dx w (- (* ew (random))))
                      (+ dy (* eh (random))))
                (cons (+ dx w (- (* ew (random))))
                      (+ dy h (- (* eh (random)))))
                (cons (+ dx (* ew (random)))
                      (+ dy h (- (* eh (random)))))))

        (define points
          (append points0 (list (car points0))))

        (send dc set-pen
              (send the-pen-list find-or-create-pen (make-color 51 187 238) 1 'solid))
        (send dc set-brush
              (send the-brush-list find-or-create-brush color 'solid))
        (send dc draw-polygon points)

        (send dc set-pen old-pen)
        (send dc set-brush old-brush))
      w h))

(define (make-logo-text font font-size spacing)
  (define A "A")
  (define L "L")
  (define TWO "²")

  (hc-append spacing
             (colorize (text A  font font-size) '(0 119 187))
             (cellophane (colorize (text L  font font-size) '(204 51 17)) 0.9)
             (cellophane (colorize (text TWO font font-size) '(238 119 51)) 0.9)))

(define (make-al2-logo dim font font-size spacing)
  (define logo-text (make-logo-text font font-size spacing))

  (define logo-size
    (let ([w (pict-width logo-text)]
          [h (pict-height logo-text)])
      (* 1.01 (max w h))))

  (printf "dim = ~a, logo-size ~a ascent ~a, descent ~a~%" dim logo-size
          (pict-ascent logo-text) (pict-descent logo-text))

  (cc-superimpose
   (ghost (rectangle dim dim))
   ;;(random-rect logo-size logo-size 0.05 (make-color 241 241 241))
   (if (< dim 32)
       ;; Don't put a border for very small icons (less than 32 pixels)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #f)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #t
                                 #:border-color (make-color 51 187 238) #;(make-color 238 119 51)
                                 #:border-width 1))
   logo-text))

(define (make-ca-logo-text font font-size spacing)
  (define A "C")
  (define L "A")
  (define TWO "²")

  (hc-append spacing
             (colorize (text A  font font-size) '(0 153 136))
             (cellophane (colorize (text L  font font-size) '(204 51 17)) 0.9)
             (cellophane (colorize (text TWO font font-size) '(238 119 51)) 0.9)))

(define (make-al2-ca-logo dim font font-size spacing)
  (define logo-text (make-ca-logo-text font font-size spacing))

  (define logo-size
    (let ([w (pict-width logo-text)]
          [h (pict-height logo-text)])
      (* 1.01 (max w h))))

  (printf "dim = ~a, logo-size ~a ascent ~a, descent ~a~%" dim logo-size
          (pict-ascent logo-text) (pict-descent logo-text))

  (cc-superimpose
   (ghost (rectangle dim dim))
   ;;(random-rect logo-size logo-size 0.05 (make-color 241 241 241))
   (if (< dim 32)
       ;; Don't put a border for very small icons (less than 32 pixels)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #f)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #t
                                 #:border-color (make-color 51 187 238) #;(make-color 238 119 51)
                                 #:border-width 1))
   logo-text))

(define (make-we-logo-text font font-size spacing)
  (define A "W")
  (define L "E")
  (define TWO "²")

  (hc-append spacing
             (colorize (text A  font font-size) '(51 187 238))
             (cellophane (colorize (text L  font font-size) '(204 51 17)) 0.9)
             (cellophane (colorize (text TWO font font-size) '(238 119 51)) 0.9)))

(define (make-al2-we-logo dim font font-size spacing)
  (define logo-text (make-we-logo-text font font-size spacing))

  (define logo-size
    (let ([w (pict-width logo-text)]
          [h (pict-height logo-text)])
      (* 1.01 (max w h))))

  (printf "dim = ~a, logo-size ~a ascent ~a, descent ~a~%" dim logo-size
          (pict-ascent logo-text) (pict-descent logo-text))

  (cc-superimpose
   (ghost (rectangle dim dim))
   ;;(random-rect logo-size logo-size 0.05 (make-color 241 241 241))
   (if (< dim 32)
       ;; Don't put a border for very small icons (less than 32 pixels)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #f)
       (filled-rounded-rectangle logo-size logo-size -0.05
                                 #:color (make-color 241 241 241)
                                 #:draw-border? #t
                                 #:border-color (make-color 51 187 238) #;(make-color 238 119 51)
                                 #:border-width 1))
   logo-text))


;; (define face (cons 'bold "Aharoni"))
;; Segoe UI Black

(define logo-256
  (make-al2-logo 256 "Segoe UI Black" 190 -40))
(define logo-128
  (make-al2-logo 128 "Segoe UI Black" 90 -20))
(define logo-96
  (make-al2-logo 96 "Segoe UI Black" 70 -15))
(define logo-64
  (make-al2-logo 64 "Segoe UI Black" 46 -10))
(define logo-48
  (make-al2-logo 48 "Segoe UI Black" 32 -8))
(define logo-40
  (make-al2-logo 40 "Segoe UI Black" 28 -6))
(define logo-32
  (make-al2-logo 32 "Segoe UI Black" 22 -4))
(define logo-24
  (make-al2-logo 24 "Segoe UI Black" 16 -3))
(define logo-20
  (make-al2-logo 20 "Segoe UI Black" 14 -3))
(define logo-16
  (make-al2-logo 16 "Segoe UI Black" 10 -1))

(define bmps (map pict->bitmap (list logo-16
                                     logo-20
                                     logo-24
                                     logo-32
                                     logo-40
                                     logo-48
                                     logo-64
                                     logo-128
                                     logo-256)))

(define icns (map bitmap->ico bmps))


(send (pict->bitmap logo-128) save-file "ActivityLog2.png" 'png)
(write-icos icns "ActivityLog2.ico" #:exists 'replace)

(define ca-logo-256
  (make-al2-ca-logo 256 "Segoe UI Black" 190 -40))
(define ca-logo-128
  (make-al2-ca-logo 128 "Segoe UI Black" 90 -20))
(define ca-logo-96
  (make-al2-ca-logo 96 "Segoe UI Black" 70 -15))
(define ca-logo-64
  (make-al2-ca-logo 64 "Segoe UI Black" 46 -10))
(define ca-logo-48
  (make-al2-ca-logo 48 "Segoe UI Black" 32 -8))
(define ca-logo-40
  (make-al2-ca-logo 40 "Segoe UI Black" 28 -6))
(define ca-logo-32
  (make-al2-ca-logo 32 "Segoe UI Black" 22 -4))
(define ca-logo-24
  (make-al2-ca-logo 24 "Segoe UI Black" 16 -3))
(define ca-logo-20
  (make-al2-ca-logo 20 "Segoe UI Black" 14 -3))
(define ca-logo-16
  (make-al2-ca-logo 16 "Segoe UI Black" 10 -1))

(define ca-bmps (map pict->bitmap (list ca-logo-16
                                        ca-logo-20
                                        ca-logo-24
                                        ca-logo-32
                                        ca-logo-40
                                        ca-logo-48
                                        ca-logo-64
                                        ca-logo-128
                                        ca-logo-256)))

(define ca-icns (map bitmap->ico ca-bmps))

(send (pict->bitmap ca-logo-128) save-file "AL2-Climb-Analysis.png" 'png)
(write-icos ca-icns "AL2-Climb-Analysis.ico" #:exists 'replace)

(define we-logo-256
  (make-al2-we-logo 256 "Segoe UI Black" 155 -40))
(define we-logo-128
  (make-al2-we-logo 128 "Segoe UI Black" 90 -20))
(define we-logo-96
  (make-al2-we-logo 96 "Segoe UI Black" 70 -15))
(define we-logo-64
  (make-al2-we-logo 64 "Segoe UI Black" 46 -10))
(define we-logo-48
  (make-al2-we-logo 48 "Segoe UI Black" 32 -8))
(define we-logo-40
  (make-al2-we-logo 40 "Segoe UI Black" 28 -6))
(define we-logo-32
  (make-al2-we-logo 32 "Segoe UI Black" 22 -4))
(define we-logo-24
  (make-al2-we-logo 24 "Segoe UI Black" 16 -3))
(define we-logo-20
  (make-al2-we-logo 20 "Segoe UI Black" 14 -3))
(define we-logo-16
  (make-al2-we-logo 16 "Segoe UI Black" 10 -1))

(define we-bmps (map pict->bitmap (list we-logo-16
                                        we-logo-20
                                        we-logo-24
                                        we-logo-32
                                        we-logo-40
                                        we-logo-48
                                        we-logo-64
                                        we-logo-128
                                        we-logo-256)))

(define we-icns (map bitmap->ico we-bmps))

(send (pict->bitmap we-logo-128) save-file "AL2-Workout-Editor.png" 'png)
(write-icos we-icns "AL2-Workout-Editor.png.ico" #:exists 'replace)


(list
 256 logo-256
 128 logo-128
 96 logo-96
 64 logo-64
 48 logo-48
 40 logo-40
 32 logo-32
 24 logo-24
 20 logo-20
 16 logo-16)

(list
 256 ca-logo-256
 128 ca-logo-128
 96 ca-logo-96
 64 ca-logo-64
 48 ca-logo-48
 40 ca-logo-40
 32 ca-logo-32
 24 ca-logo-24
 20 ca-logo-20
 16 ca-logo-16)

(list
 256 we-logo-256
 128 we-logo-128
 96 we-logo-96
 64 we-logo-64
 48 we-logo-48
 40 we-logo-40
 32 we-logo-32
 24 we-logo-24
 20 we-logo-20
 16 we-logo-16)
